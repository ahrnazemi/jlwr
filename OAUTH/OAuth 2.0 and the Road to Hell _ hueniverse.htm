<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<title>OAuth 2.0 and the Road to Hell | hueniverse</title>
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="http://hueniverse.com/xmlrpc.php">

		<script src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/remote-login.htm" type="text/javascript"></script>
		<script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script>
		<link rel="alternate" type="application/rss+xml" title="hueniverse » Feed" href="http://hueniverse.com/feed/">
<link rel="alternate" type="application/rss+xml" title="hueniverse » Comments Feed" href="http://hueniverse.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="hueniverse » OAuth 2.0 and the Road to&nbsp;Hell Comments Feed" href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/feed/">
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel="stylesheet" id="all-css-0" href="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/a.htm" type="text/css" media="all">
<link rel="stylesheet" id="syntax-merriweather-css" href="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/css.css" type="text/css" media="all">
<link rel="stylesheet" id="all-css-2" href="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/a.css" type="text/css" media="all">
<link rel="stylesheet" id="print-css-2" href="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/global-print.css" type="text/css" media="print">
<script type="text/javascript">
/* <![CDATA[ */
var LoggedOutFollow = {"invalid_email":"Your subscription did not succeed, please try again with a valid email address."};
/* ]]> */
</script>
<script type="text/javascript" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/a_002.htm"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://hueniversedotcom.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://s1.wp.com/wp-includes/wlwmanifest.xml"> 
<link rel="prev" title="You, Me, and Node&nbsp;@WalmartLabs" href="http://hueniverse.com/2012/01/04/you-me-and-node-walmartlabs/">
<link rel="next" title="On Leaving OAuth" href="http://hueniverse.com/2012/07/30/on-leaving-oauth/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/">
<link rel="shortlink" href="http://wp.me/p4vdHZ-oO">
<link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=json&amp;url=http%3A%2F%2Fhueniverse.com%2F2012%2F07%2F26%2Foauth-2-0-and-the-road-to-hell%2F&amp;for=wpcom-auto-discovery"><link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=xml&amp;url=http%3A%2F%2Fhueniverse.com%2F2012%2F07%2F26%2Foauth-2-0-and-the-road-to-hell%2F&amp;for=wpcom-auto-discovery">
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article">
<meta property="og:title" content="OAuth 2.0 and the Road to Hell">
<meta property="og:url" content="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/">
<meta property="og:description" content="They say the road to hell is paved with good intentions. Well, that’s OAuth 2.0. Last month I reached the painful conclusion that I can no longer be associated with the OAuth 2.0 standard. I resign...">
<meta property="article:published_time" content="2012-07-26T07:37:23+00:00">
<meta property="article:modified_time" content="2012-07-26T07:37:23+00:00">
<meta property="article:author" content="http://hueniverse.com/author/hueniverse/">
<meta property="og:site_name" content="hueniverse">
<meta property="og:image" content="http://hueniversedotcom.files.wordpress.com/2012/07/oauthdead.jpg">
<meta name="twitter:site" content="@eranhammer">
<meta name="twitter:image" content="http://hueniversedotcom.files.wordpress.com/2012/07/oauthdead.jpg?w=240">
<meta name="twitter:card" content="summary">
<meta name="twitter:creator" content="@eranhammer">
<meta property="article:publisher" content="https://www.facebook.com/WordPresscom">
<link rel="shortcut icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1405977958g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1405977958g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon-precomposed" href="http://s0.wp.com/i/webclip.png?m=1391188133g">
<link rel="openid.server" href="http://hueniversedotcom.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://hueniversedotcom.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://hueniverse.com/osd.xml" title="hueniverse">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<meta name="application-name" content="hueniverse"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://hueniverse.com/feed/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="title" content="OAuth 2.0 and the Road to&nbsp;Hell | hueniverse on WordPress.com">
<meta name="description" content="They say the road to hell is paved with good intentions. Well, that’s OAuth 2.0. Last month I reached the painful conclusion that I can no longer be associated with the OAuth 2.0 standard. I resigned my role as lead author and editor, withdraw my name from the specification, and left the working group. Removing…">
<style type="text/css" id="syntaxhighlighteranchor"></style>
		<link rel="stylesheet" id="custom-css-css" type="text/css" href="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/a_002.css">
		</head>

<body class="single single-post postid-1538 single-format-standard custom-background mp6 typekit-enabled highlander-enabled highlander-light">
<div id="page" class="hfeed site">
		<header id="masthead" class="site-header" role="banner">
				<div class="site-header-wrapper clear">
			<div class="site-branding">
				<h1 class="site-title"><a href="http://hueniverse.com/" title="hueniverse" rel="home">hueniverse</a></h1>
				<!--<h2 class="site-description"></h2>-->
			</div>
					</div>
	</header><!-- #masthead -->
	<div id="main" class="site-main">
		<h1 id="toggle-nav" class="menu-toggle"><span class="screen-reader-text">Menu</span></h1>
		<nav id="site-navigation" class="navigation-main" role="navigation">
			<div class="screen-reader-text skip-link"><a href="#content" title="Skip to content">Skip to content</a></div>
			<div class="menu"><ul><li><a href="http://hueniverse.com/">Home</a></li><li class="page_item page-item-583"><a href="http://hueniverse.com/disclaimer/">Disclaimer</a></li><li class="page_item page-item-500 page_item_has_children"><a href="http://hueniverse.com/oauth/">OAuth</a><ul class="children"><li class="page_item page-item-1024 page_item_has_children"><a href="http://hueniverse.com/oauth/guide/">The OAuth 1.0&nbsp;Guide</a><ul class="children"><li class="page_item page-item-1027"><a href="http://hueniverse.com/oauth/guide/intro/">Introduction</a></li><li class="page_item page-item-1029"><a href="http://hueniverse.com/oauth/guide/history/">History</a></li><li class="page_item page-item-1038"><a href="http://hueniverse.com/oauth/guide/terminology/">Terminology</a></li><li class="page_item page-item-1036"><a href="http://hueniverse.com/oauth/guide/structure/">Specification Structure</a></li><li class="page_item page-item-1042"><a href="http://hueniverse.com/oauth/guide/workflow/">Protocol Workflow</a></li><li class="page_item page-item-1047"><a href="http://hueniverse.com/oauth/guide/security/">Security Framework</a></li><li class="page_item page-item-1051"><a href="http://hueniverse.com/oauth/guide/authentication/">Authentication</a></li></ul></li></ul></li></ul></div>
		</nav><!-- #site-navigation -->

	<div id="primary" class="content-area">
		<div id="content" class="site-content" role="main">

		
			<article id="post-1538" class="post-1538 post type-post status-publish format-standard hentry category-oauth category-open-web">
	<header class="entry-header">
				<h1 class="entry-title">OAuth 2.0 and the Road to&nbsp;Hell</h1>	</header><!-- .entry-header -->

	<div class="entry-content">
		<p>They say the road to hell is paved with good intentions. Well, that’s <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2">OAuth 2.0</a>.</p>
<p>Last month I reached the painful conclusion that I can no longer be 
associated with the OAuth 2.0 standard. I resigned my role as lead 
author and editor, <strong>withdraw my name from the specification</strong>,
 and left the working group. Removing my name from a document I have 
painstakingly labored over for three years and over two dozen drafts was
 not easy. Deciding to move on from an effort I have led for over five 
years was agonizing.<span id="more-1538"></span></p>
<p>There wasn’t a single problem or incident I can point to in order to 
explain such an extreme move. This is a case of death by a thousand 
cuts, and as the work was winding down, I’ve found myself reflecting 
more and more on what we actually accomplished. At the end, I reached 
the conclusion that OAuth 2.0 is a bad protocol. WS-* bad. It is bad 
enough that I no longer want to be associated with it. It is the biggest
 professional disappointment of my career.</p>
<p>All the hard fought compromises on the mailing list, in meetings, in 
special design committees, and in back channels resulted in a 
specification that fails to deliver its two main goals – security and 
interoperability. In fact, one of the compromises was to rename it from a
 protocol to a framework, and another to add a <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-30#section-1.8">disclaimer that warns that the specification is unlike to produce interoperable implementations</a>.</p>
<p>When compared with <a href="http://tools.ietf.org/html/rfc5849">OAuth 1.0</a>, the 2.0 specification is more complex, less interoperable, less useful, more incomplete, and most importantly, less secure.</p>
<p>To be clear, OAuth 2.0 at the hand of a developer with deep 
understanding of web security will likely result is a secure 
implementation. However, at the hands of most developers – as has been 
the experience from the past two years – 2.0 is likely to produce 
insecure implementations.</p>
<h3>How did we get here?</h3>
<p>At the core of the problem is the strong and unbridgeable conflict between the <strong>web</strong> and the <strong>enterprise</strong>
 worlds. The OAuth working group at the IETF started with strong web 
presence. But as the work dragged on (and on) past its first year, those
 web folks left along with every member of the original 1.0 community. 
The group that was left was largely all enterprise… and me.</p>
<p>The web community was looking for a protocol very much in-line with 
1.0, with small improvement in areas that proved lacking: simplifying 
signature, adding a light identity layer, addressing native 
applications, adding more flows to accommodate new client types, and 
improving security. The enterprise community was looking for a framework
 they can use with minimal changes to their existing systems, and for 
some, a new source of revenues through customization. To understand the 
depth of the divide – in an early meeting the web folks wanted a flow 
optimized for in-browser clients while the enterprise folks wanted a 
flow using SAML assertions.</p>
<p>The resulting specification is a <strong>designed-by-committee</strong>&nbsp;patchwork
 of compromises that serves mostly the enterprise. To be accurate, it 
doesn’t actually give the enterprise all of what they asked for 
directly, but it does provide for practically unlimited extensibility. 
It is this extensibility and required flexibility that destroyed the 
protocol. <strong>With very little effort, pretty much anything can be called OAuth 2.0 compliant.</strong></p>
<h3>Under the Hood</h3>
<p>To understand the issues in 2.0, you need to understand the core architectural changes from 1.0:</p>
<ul>
<li><strong>Unbounded tokens</strong> –&nbsp;In 1.0, the client has to 
present two sets of credentials on each protected resource request, the 
token credentials and the client credentials. In 2.0, the client 
credentials are no longer used. This means that tokens are no longer 
bound to any particular client type or instance. This has introduced 
limits on the usefulness of access tokens as a form of authentication 
and increased the likelihood of security issues.</li>
<li><strong>Bearer tokens</strong> &nbsp;–&nbsp;2.0 got rid of all 
signatures and cryptography at the protocol level. Instead it relies 
solely on TLS. This means that <a href="http://hueniverse.com/2010/09/oauth-bearer-tokens-are-a-terrible-idea/">2.0 tokens are inherently less secure as specified</a>. Any improvement in token security requires additional specifications and as the current proposals <a href="http://openid.net/specs/draft-jones-json-web-token-07.html">demonstrate</a>, the group is solely focused on enterprise use cases.</li>
<li><strong>Expiring tokens</strong> –&nbsp;2.0 tokens can expire and 
must be refreshed. This is the most significant change for client 
developers from 1.0 as they now need to implement token state 
management. The reason for token expiration is to accommodate 
self-encoded tokens – encrypted tokens which can be authenticated by the
 server without a database&nbsp;look-up. Because such tokens are 
self-encoded, they cannot be revoked and therefore must be short-lived 
to reduce their exposure. Whatever is gained from the removal of the 
signature is lost twice in the introduction of the token state 
management requirement.</li>
<li><strong>Grant types</strong> –&nbsp;In 2.0, authorization grants are
 exchanged for access tokens. Grant is an abstract concept representing 
the end-user approval. It can be a code received after the user clicks 
‘Approve’ on an access request, or the user’s actual username and 
password. The original idea behind grants was to enable multiple flows. 
1.0 provides a single flow which aims to accommodate multiple client 
types. 2.0 adds significant amount of specialization for different 
client type.</li>
</ul>
<h3>Indecision Making</h3>
<p>These changes are all manageable if put together in a well-defined 
protocol. But as has been the nature of this working group, no issue is 
too small to get stuck on or leave open for each implementation to 
decide. Here is a very short <strong>sample</strong> of the working group’s inability to agree:</p>
<ul>
<li>No required token type</li>
<li>No agreement on the goals of an HMAC-enabled token type</li>
<li>No requirement to implement token expiration</li>
<li>No guidance on token string size, or any value for that matter</li>
<li>No strict requirement for registration</li>
<li>Loose client type definition</li>
<li>Lack of clear client security properties</li>
<li>No required grant types</li>
<li>No guidance on the suitability or applicability of grant types</li>
<li>No useful support for native applications (but lots of lip service)</li>
<li>No required client authentication method</li>
<li>No limits on extensions</li>
</ul>
<p>On the other hand, 2.0 defines 4 new registries for extensions, along
 with additional extension points via URIs. The result is a flood of 
proposed extensions. But the real issues is that the working group could
 not define the real security properties of the protocol. This is 
clearly reflected in the security consideration section which is largely
 an exercise of hand waving. It is barely useful to security experts as a
 bullet point of things to pay attention to.</p>
<p>In fact, the working group has also produced a 70 pages document describing the <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-threatmodel">2.0 threat model</a>
 which does attempt to provide additional information but suffers from 
the same fundamental problem: there isn’t an actual protocol to analyze.</p>
<h3>Reality</h3>
<p>In the real world, Facebook is still running on draft 12 from a year 
and a half ago, with absolutely no reason to update their 
implementation. After all, an updated 2.0 client written to work with 
Facebook’s implementation is unlikely to be useful with any other 
provider and vice-versa. OAuth 2.0 offers little to none 
code&nbsp;re-usability.</p>
<p>What 2.0 offers is a <strong>blueprint</strong> for an authorization 
protocol. As defined, it is largely useless and must be profiles into a 
working solution – and that is the enterprise way.<strong> The WS-* way</strong>. 2.0 provides a whole new frontier to sell consulting services and integration solutions.</p>
<p><strong>The web does not need yet another security framework.</strong>
 It needs simple, well-defined, and narrowly suited protocols that will 
lead to improved security and increased interoperability. OAuth 2.0 
fails to accomplish anything meaningful over the protocol it seeks to 
replace.</p>
<h3>To Upgrade or Not to Upgrade</h3>
<p>Over the past few months, many asked me if they should upgrade to 2.0
 or which version of the protocol I recommend they implement. I don’t 
have a simple answer.</p>
<p>If you are currently using 1.0 successfully, ignore 2.0. It offers no
 real value over 1.0 (I’m guessing your client developers have already 
figured out 1.0 signatures by now).</p>
<p>If you are new to this space, and consider yourself a security 
expert, use 2.0 after careful examination of its features. If you are 
not an expert, either use 1.0 or copy the 2.0 implementation of a 
provider you trust to get it right (Facebook’s API documents are a good 
place to start). 2.0 is better for large scale, but if you are running a
 major operation, you probably have some security experts on site to 
figure it all out for you.</p>
<h3>Now What?</h3>
<p>I’m hoping someone will take 2.0 and produce a 10 page profile that’s
 useful for the vast majority of web providers, ignoring the enterprise.
 A 2.1 that’s really 1.5. But that’s not going to happen at the IETF. 
That community is all about enterprise use cases and if you look at 
their other efforts like<a href="http://openid.net/connect/"> OpenID Connect</a> (which too was a super simple proposal turned into almost a dozen complex specifications), <strong>they are not capable of simple</strong>.</p>
<p>I think the OAuth brand is in decline. This framework will live for a
 while, and given the lack of alternatives, it will gain widespread 
adoption. But we are also <strong>likely to see major security failures in the next couple of years</strong> and the slow but steady devaluation of the brand. It will be another hated protocol you are stuck with.</p>
<p>At the same time, I am expecting multiple new communities to come up 
with something else that is more in the spirit of 1.0 than 2.0, and 
where one use case is covered extremely well. OAuth 1.0 was all about 
small web startups looking to solve a well-defined problem they needed 
to solve fast. I honestly don’t know what use cases OAuth 2.0 is trying 
to solve any more.</p>
<h3>Final Note</h3>
<p>This is a sad conclusion to a once promising community. OAuth was the
 poster child of small, quick, and useful standards, produced outside 
standards bodies without all the process and legal overhead.</p>
<p>Our standards making process is broken beyond repair. This outcome is
 the direct result of the nature of the IETF, and the particular 
personalities overseeing this work. To be clear, these are not bad or 
incompetent individuals. On the contrary – they are all very capable, 
bright, and otherwise pleasant. But most of them show up to serve their 
corporate overlords, and it’s practically impossible for the rest of us 
to compete.</p>
<p>Bringing OAuth to the IETF was a huge mistake. <a href="http://hueniverse.com/2009/11/wrap-and-the-demise-of-the-oauth-community/">Not that the alternative (WRAP) would have been a better outcome</a>, but at least it would have taken <strong>three less years</strong>
 to figure that out. I stuck around as long as I could stand it, to 
fight for what I thought was best for the web. I had nothing personally 
to gain from the decisions being made. At the end, one voice in 
opposition can slow things down, but can’t make a difference.</p>
<p>I failed.</p>
<p>We failed.</p>
<p><a href="http://hueniversedotcom.files.wordpress.com/2012/07/oauthdead.jpg"><img class="aligncenter size-full wp-image-1545" title="OAuth 2.0 Dead" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/oauthdead.htm" alt=""></a></p>
<p><a href="http://hueniverse.com/2012/07/on-leaving-oauth/">Some more thoughts…</a></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow" class="share-twitter sd-button share-icon" href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/?share=twitter" title="Click to share on Twitter" id="sharing-twitter-1538"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow" class="share-facebook sd-button share-icon" href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/?share=facebook" title="Share on Facebook" id="sharing-facebook-1538"><span>Facebook</span></a></li><li class="share-google-plus-1"><a rel="nofollow" class="share-google-plus-1 sd-button share-icon" href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/?share=google-plus-1" title="Click to share on Google+" id="sharing-google-1538"><span>Google</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-66546211-1538-53f33605331c0" data-src="//widgets.wp.com/likes/#blog_id=66546211&amp;post_id=1538&amp;origin=hueniversedotcom.wordpress.com&amp;obj_id=66546211-1538-53f33605331c0" data-name="like-post-frame-66546211-1538-53f33605331c0"><h3 class="sd-title">Like this:</h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height:55px"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>			</div><!-- .entry-content -->

	<footer class="entry-meta">
		<span class="post-date"><a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/" title="12:37 am" rel="bookmark"><time class="entry-date" datetime="2012-07-26T00:37:23+00:00">July 26, 2012</time></a></span><span class="byline"><span class="author vcard"><a class="url fn n" href="http://hueniverse.com/author/hueniverse/" title="View all posts by Eran Hammer" rel="author">Eran Hammer</a></span></span>					</footer><!-- .entry-meta -->
</article><!-- #post-## -->

				<nav role="navigation" id="nav-below" class="navigation-post">
		<h1 class="screen-reader-text">Post navigation</h1>

	
		<div class="nav-previous"><a href="http://hueniverse.com/2012/01/04/you-me-and-node-walmartlabs/" rel="prev"><span class="meta-nav">←</span> You, Me, and Node&nbsp;@WalmartLabs</a></div>		<div class="nav-next"><a href="http://hueniverse.com/2012/07/30/on-leaving-oauth/" rel="next">On Leaving OAuth <span class="meta-nav">→</span></a></div>
	
	</nav><!-- #nav-below -->
	
			
	<div id="comments" class="comments-area">

	
			<h2 class="comments-title">
			153 thoughts on “<span>OAuth 2.0 and the Road to&nbsp;Hell</span>”		</h2>

				<nav id="comment-nav-above" class="navigation-comment" role="navigation">
			<h1 class="screen-reader-text">Comment navigation</h1>
			<div class="nav-previous"><a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-1/#comments">← Older Comments</a></div>
			<div class="nav-next"></div>
		</nav><!-- #comment-nav-above -->
		
		<ol class="comment-list">
			
	<li id="comment-1104" class="pingback even thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.zdnet.de/88116435/entwicklungsleiter-erklart-web-authentifizierung-oauth-2-0-fur-gescheitert/" rel="external nofollow" class="url">Entwicklungsleiter distanziert sich von OAuth 2.0</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1106" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.tmtnow.com/hoofdontwikkelaar-stopt-uit-onvrede-met-oauth-2-0-specificatie/" rel="external nofollow" class="url">Hoofdontwikkelaar stopt uit onvrede met OAuth 2.0-specificatie | Trending in Nederland</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1107" class="pingback even thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://edv-sicherheitskonzepte.de/sicherheitsblog/sicherheits-news/entwickler-oauth-2-0-weniger-interoperabel-und-weniger-sicher/" rel="external nofollow" class="url">Entwickler: "OAuth 2.0 weniger interoperabel und weniger sicher" | Edv-Sicherheitskonzepte.de – News Blog aus vielen Bereichen</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1108" class="comment odd alt thread-odd thread-alt depth-1 highlander-comment">
		<article id="div-comment-1108" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/99636af1c451e7c17ae4395c3b1965b4.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">Torsten Lodderstedt</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1108">
						<time datetime="2012-07-29T07:41:14+00:00">
							July 29, 2012 at 7:41 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Hi Eran,</p>
<p>as already indicated on the list. I think you made a great job as 
editor of the base spec. Sadly, your and mine assessment of what we have
 achieved so far seem to contradict. At Deutsche Telekom, we have 
implemented proprietary token protocols as well as OAuth 1 and 2. Based 
on our experiences I would conclude, OAuth 2 is by no means perfect but 
better in terms of interoperability, usablility, and scalability than 
everything else we had before. And our security team is happy as well. </p>
<p>As editor of the OAuth 2.0 security document I would be eager to know
 how you came to the conclusion OAuth 2 is less secure than OAuth 1. 
What problems of practical relevance do you see? And what evidences do 
you have?</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1109" class="comment even thread-even depth-1 highlander-comment">
		<article id="div-comment-1109" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/4bb012f45efa955f453e19967429afe1.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://werle.io/" rel="external nofollow" class="url">Joseph Werle</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1109">
						<time datetime="2012-07-29T09:30:06+00:00">
							July 29, 2012 at 9:30 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>This was beyond inspiring and shows how one can truly be humble 
about a project they started and knowing when to throw in the towel. It 
is another spec gone wild and to far out to come back. Being the creator
 and recognizing that is truly a power many don’t have..</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1111" class="comment odd alt thread-odd thread-alt depth-1 highlander-comment">
		<article id="div-comment-1111" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/88d6511b6491b53daf32a211d8617975.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">Mojo Jojo</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1111">
						<time datetime="2012-07-29T09:44:03+00:00">
							July 29, 2012 at 9:44 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>The 2.0 draft is roughly double the number of pages of 1.0.</p>
<p>Double the page count for a revision is usually a sign of 
administrivium and committee-itis, of anything other than “a revision of
 an existing protocol”.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1112" class="comment even thread-even depth-1 highlander-comment">
		<article id="div-comment-1112" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/0e5be8778571e5629827b136843bfcab.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://dc3.com/" rel="external nofollow" class="url">Bob Denny</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1112">
						<time datetime="2012-07-29T17:34:22+00:00">
							July 29, 2012 at 5:34 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>This scenario has been repeated ad nauseum as long as I have been
 associated with computing and communications (my whole life, 40+ years 
as a developer and I am current and still do it full time as a 
profession). Having been through a similar evolution in the area of a 
protocol for distributing transient astronomical events for followup, I 
can say that the collective farming model of engineering is flourishing.
 Under this model, people are more concerned with form than results, and
 everyone has to urinate on the fire hydrant. Compare with engineering 
where elegance, results, prototyping, and incremental refinement in the 
real world, are king. Reading your story was a trip down many memory 
lanes. I’m sorry for your loss.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1113" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.findthomas.net/blog/2012/07/30/eran-bails-out-of-the-oauth2-0-spec/" rel="external nofollow" class="url">Eran bails out of the OAuth2.0 Spec at "Find Thomas on the Net" . . .</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1115" class="comment byuser comment-author-hueniverse bypostauthor even thread-even depth-1 highlander-comment">
		<article id="div-comment-1115" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/28d0cb94cd9afcc9763dd64fea80a187.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://hueniverse.com/" rel="external nofollow" class="url">Eran Hammer</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1115">
						<time datetime="2012-07-29T22:32:27+00:00">
							July 29, 2012 at 10:32 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Worth reading: <a href="http://www.tbray.org/ongoing/When/201x/2012/07/28/Oauth2-dead" rel="nofollow">http://www.tbray.org/ongoing/When/201x/2012/07/28/Oauth2-dead</a></p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1118" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.techbeast.net/2012/07/30/oauth-2-0-standard-editor-quits-takes-name-off-spec-%e2%80%a2-the-register/" rel="external nofollow" class="url">OAuth 2.0 standard editor quits, takes name off spec • The Register - Techbeast.net</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1120" class="pingback even thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://mondaybynoon.com/20120730/oauth-2-0-and-the-road-to-hell/" rel="external nofollow" class="url">OAuth 2.0 and the Road to Hell</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1121" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://tech-nieuws.nl/ontwikkelaar-oauth-is-de-weg-naar-de-hel/9715/" rel="external nofollow" class="url">Ontwikkelaar: ‘OAuth is de weg naar de hel’ | Tech-nieuws</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1122" class="comment even thread-even depth-1 parent highlander-comment">
		<article id="div-comment-1122" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/9d9b7698c26959f57c0e3814005b8b52.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">James Henstridge</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1122">
						<time datetime="2012-07-30T08:23:48+00:00">
							July 30, 2012 at 8:23 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Looking through your complaints, could you elaborate why the 
“unbounded tokens” issue is bad?  It isn’t clear what benefit there is 
to the client in providing its ID in every request, and the server 
obviously knows who it issued the token to (and could encode the client 
ID in the token if it really wants).  And the OAuth 2 design sounds like
 it would let the service limit knowledge of client secrets to the code 
that issues tokens rather than every piece of code that checks 
signatures needing those secrets.</p>
<p>As for token types, OAuth 1 has PLAINTEXT and HMAC-SHA1, while OAuth 2
 has bearer and HMAC token types.  While there are obviously places 
where OAuth 1 HMAC-SHA1 signatures are suitable where OAuth 2 bearer 
tokens aren’t, that isn’t really a fair comparison.  Comparing PLAINTEXT
 signatures with bearer tokens makes more sense, and I think bearer 
tokens come out ahead.  They do away with unnnecessary timestamps and 
nonces, which only add failure modes rather than extra security (e.g. 
does it really matter if a client’s clock is wrong when they’re using 
PLAINTEXT auth?).  Reserving that complexity for HMAC tokens seems like a
 sensible improvement.</p>
<p>As for token expiration, OAuth 1 clients need to deal with the 
possibility that their token may become invalid some time down the track
 (possibly because it expired).  It isn’t obvious to me that formalising
 this case is a bad thing.</p>
<p>I haven’t read the grants section in detail, but I will say that I’ve
 seen people get confused about the distinction between OAuth 1 request 
tokens and access tokens.  So using different terminology for these 
different phases of the authorisation process seems somewhat sane.  
Documeinting a method to implement “desktop username/password auth” (not
 via web browser) also seems like a decent addition too.  When we wanted
 to do this with OAuth 1, the spec offered no guidance but we ended up 
with something that is roughly equivalent.</p>
<p>I haven’t used OAuth 2 in anger yet, so perhaps I am wrong about some
 of this.  But from my use of OAuth 1, the changes don’t all obviously 
sound like bad ideas.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	<ul class="children">

	<li id="comment-1124" class="comment byuser comment-author-hueniverse bypostauthor odd alt depth-2 parent highlander-comment">
		<article id="div-comment-1124" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/28d0cb94cd9afcc9763dd64fea80a187.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://hueniverse.com/" rel="external nofollow" class="url">Eran Hammer</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1124">
						<time datetime="2012-07-30T09:00:19+00:00">
							July 30, 2012 at 9:00 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>The changes are all valid technical choices. They are not 
necessarily bad on their own. What they do is make OAuth better at scale
 by stripping down protections under the assumption that other layers 
will take care of things. The problem is, this is not how modern 
security protocols should be designed with layered security. Because the
 token is unbounded, all you need is to steal just one thing, and is TLS
 wasn’t configured correctly, you’re toast. Also, with bounded tokens, a
 client must share its own credentials to share tokens around. This is a
 good protection against an approved application leaking your data.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	<ul class="children">

	<li id="comment-1129" class="comment even depth-3 parent highlander-comment">
		<article id="div-comment-1129" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/9d9b7698c26959f57c0e3814005b8b52.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">James Henstridge</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1129">
						<time datetime="2012-07-30T19:19:15+00:00">
							July 30, 2012 at 7:19 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>I realise that if the transport layer security fails and a bearer
 token is leaked, it can be used as credentials for other requests.  But
 the same is true for OAuth 1 PLAINTEXT signatures: while you need four 
values to generate the signature instead of just one, those four are 
always presented together so it isn’t clear they offer any more security
 than a single value.  If anything, it looks like the bearer token would
 offer slightly more security since such a leak won’t expose the client 
ID and secret.</p>
<p>Now of course OAuth 1’s HMAC-SHA1 signatures offer better security in
 this situation.  But that point seems moot given that the OAuth 2 specs
 document HMAC tokens.  I realise that HMAC tokens only use two values 
to construct the signature while OAuth 1’s signatures use four, but 
those four values in OAuth 1 signatures may as well only be two given 
the way they’re used (consumer_key+token and 
consumer_secret+token_secret).</p>
<p>It really doesn’t look any worse than the situation of OAuth 1 documenting multiple signing algorithms.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1131" class="comment odd alt depth-3 parent highlander-comment">
		<article id="div-comment-1131" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/d613bb16a0b359279c62e6c8040dfa99.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://daniel.friesen.name/" rel="external nofollow" class="url">Daniel Friesen</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1131">
						<time datetime="2012-07-30T19:40:38+00:00">
							July 30, 2012 at 7:40 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Btw, side note reading the OAuth 2 MAC spec and OAuth 1’s HMAC-SHA1 section I  noticed something.<br>
OAuth 1 signatures include the POST body for form-urlencoded data while OAuth 2 MACs offer no protection to the entity-body.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1135" class="comment byuser comment-author-hueniverse bypostauthor even depth-3 parent highlander-comment">
		<article id="div-comment-1135" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/28d0cb94cd9afcc9763dd64fea80a187.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://hueniverse.com/" rel="external nofollow" class="url">Eran Hammer</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1135">
						<time datetime="2012-07-30T22:57:15+00:00">
							July 30, 2012 at 10:57 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>True. It ended being an encoding/decoding nightmare. Instead, MAC
 offered an ext parameter for stuff like body hash that’s application 
specific.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1136" class="comment odd alt depth-3 highlander-comment">
		<article id="div-comment-1136" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/d613bb16a0b359279c62e6c8040dfa99.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://daniel.friesen.name/" rel="external nofollow" class="url">Daniel Friesen</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1136">
						<time datetime="2012-07-30T23:38:16+00:00">
							July 30, 2012 at 11:38 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Yeah… the way decoded query parameters was worked with and then encoded a specific way in a specific order was a mess.</p>
<p>I’ve been contemplating how I’d write a spec like this.<br>
I looked over some of the scripting languages. It looks like practically
 every language seems to give the script access to the raw post body 
(with the exception of things like multipart/form-data which you would 
stream and wouldn’t want a signature for).</p>
<p>Under that vein my thought was to have two modes for the mac. One 
that excludes the body and another that includes the body in the 
signature (or rather includes a hash of the body into the signature, so 
large data can be verified after processing without requiring double 
storage of the original data).</p>
<p>A client would decide what mode to work in depending on the data they
 are working with. Large contents and multipart documents you’d use the 
mode without the body. And with form-urlencoded, json, xml, etc… post 
APIs you would sign the body.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1132" class="comment even depth-3 parent highlander-comment">
		<article id="div-comment-1132" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/d613bb16a0b359279c62e6c8040dfa99.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://daniel.friesen.name/" rel="external nofollow" class="url">Daniel Friesen</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1132">
						<time datetime="2012-07-30T20:11:02+00:00">
							July 30, 2012 at 8:11 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>OAuth 1 emphasized signatures while OAuth 2 seems to emphasize 
bearer tokens. So there is a an issue with perception of the spec to 
consider. Everyone who used OAuth 1 used signatures. While everyone who 
has used OAuth 2 have only used bearer tokens and seem to consider this 
security degradation as and advantage.</p>
<p>That aside technically yes we should probably compare OAuth 1 HMAC to OAuth 2 MAC tokens.</p>
<p>On the topic of unbounded tokens combined with (H)MAC signatures.<br>
Assuming the TLS connection fails (the client developer decides to 
disable it, etc…) doesn’t the fact that the access token is unbounded 
leave it open to abuse by the MITM?</p>
<p>In an OAuth 1 signature the client secret and token secret are used 
together. While an OAuth 2 signature just uses the token secret.<br>
Because HMAC is used the token secret is safe in both cases for requests using the token.</p>
<p>But what about the token endpoint itself? If TLS protection has 
failed then isn’t it likely that the MITM is capable of watching you 
make the grant request to the token endpoint asking for the token?<br>
So even though we’re using signatures doesn’t this mean that the MITM 
has likely gotten ahold of the MAC token and knows the secret already?</p>
<p>OAuth 1 uses the client secret and the token secret. So you shouldn’t
 be able to do anything malicious since the MITM doesn’t know the client
 secret. But OAuth 2 doesn’t use the client credentials anywhere (until a
 refresh) after the mac credentials are handed over.</p>
<p>Doesn’t this mean that OAuth 1 bounded tokens protect the resource 
endpoint from attack while OAuth 2 unbounded tokens allow a MITM to 
freely abuse the access token maliciously?</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1133" class="comment odd alt depth-3 highlander-comment">
		<article id="div-comment-1133" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/9d9b7698c26959f57c0e3814005b8b52.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">James Henstridge</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1133">
						<time datetime="2012-07-30T22:14:58+00:00">
							July 30, 2012 at 10:14 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>In the current draft of the OAuth 2 spec, token types are 
introduced in Section 7.1.  It mentions bearer tokens with a link to the
 bearer token spec, and then mentions MAC tokens in the very next 
paragraph along with a link to that spec.  So are services picking OAuth
 2 bearer tokens that different to ones picking OAuth 1 PLAINTEXT 
signatures?</p>
<p>My point wasn’t that bearer tokens are safe against TLS failures, but
 rather that they are no worse than the OAuth 1 PLAINTEXT signatures.  
Now if there are defficiencies in OAuth 2 MAC tokens, that would seem to
 be a separate matter.</p>
<p>It does seem that MAC token authentication doesn’t protect the 
request body.  It looks like the first draft included a body hash in the
 signed request string, but was removed in the current draft.  I’m not 
sure why that was changed, but it looks like a service could reintroduce
 it through the “ext” parameter if it chose to.  That’s not particularly
 great for interoperability and not a fatal problem.</p>
<p>The other issue is that the entire MAC key is sent over the wire when
 the token is issued (a problem if the TLS fails and the connection is 
intercepted).  I agree that OAuth 1 has a leg up here, since a portion 
of the MAC key is never transmitted over the wire (the client secret)..</p>
<p>Surely it would be better to concentrate on these issues directly rather than making strawman comparisons with bearer tokens.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1134" class="comment byuser comment-author-hueniverse bypostauthor even depth-3 highlander-comment">
		<article id="div-comment-1134" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/28d0cb94cd9afcc9763dd64fea80a187.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://hueniverse.com/" rel="external nofollow" class="url">Eran Hammer</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1134">
						<time datetime="2012-07-30T22:54:41+00:00">
							July 30, 2012 at 10:54 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>First, very few providers implemented plaintext. OAuth 1.0 gave 
them three options: light, medium, and heavy. It is true that if you 
capture a plaintext request it is game over, but there are many other 
scenarios other then the ability to listen to the entire channel. In 
1.0, you provision a token to a specific client, and they you enforce 
that restriction. You can’t do that in 2.0 as specified. As to HMAC in 
2.0, I’ve been trying to get it supported for three year but at this 
point cannot predict if the working group will finish that effort. Less 
than 5 people showed interest last time I checked.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li id="comment-1123" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.25hoursaday.com/weblog/2012/07/30/OAuth20TheGoodTheBadAndTheUgly.aspx" rel="external nofollow" class="url">Dare Obasanjo aka Carnage4Life - OAuth 2.0: The good, the bad and the ugly</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1125" class="pingback even thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://kscottmorrison.com/2012/07/30/why-i-still-like-oauth/" rel="external nofollow" class="url">Why I Still Like OAuth | K. Scott Morrison's Blog</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1127" class="comment odd alt thread-odd thread-alt depth-1 highlander-comment">
		<article id="div-comment-1127" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/c92db8602598ced00ac4c48166c1e4c0.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">Rosco</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1127">
						<time datetime="2012-07-30T16:05:53+00:00">
							July 30, 2012 at 4:05 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>You could work on a new spec, call it NAuth for “New Auth – one step ahead of OAuth”! <span class="wp-smiley emoji emoji-wink" title=";)">;)</span></p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1128" class="pingback even thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://softwaremaniacs.org/blog/2012/07/30/oauth-is-not-a-protocol/en/" rel="external nofollow" class="url">Software Maniacs blog » OAuth is not a protocol</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1137" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://blog.xebia.fr/2012/07/31/revue-de-presse-xebia-2012-31/" rel="external nofollow" class="url">Revue de Presse Xebia | Blog Xebia France</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1140" class="comment even thread-even depth-1 highlander-comment">
		<article id="div-comment-1140" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/b6a5cf3213cec9e9d18f32edd479628c.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">SV</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1140">
						<time datetime="2012-07-31T06:39:22+00:00">
							July 31, 2012 at 6:39 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>This reminds me of the XSLT/XPATH 2.0 debacle at the W3C. James 
Clark, the editor and driving force behind XSLT/XPATH 1.0 dropped out of
 the effort early on – I and my colleague at Novell hung in there for 
several years before dropping out when it became clear that it was going
 to be several more years before it would be done and that the result 
would be way several orders of magnitude more complex than 1.0, which 
was already very difficult for many of our constituency to understand.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1141" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="https://www.cigital.com/justice-league-blog/2012/07/31/oauth-another-spec-bites-the-dust/" rel="external nofollow" class="url">OAuth: Another Spec Bites the Dust | Cigital</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1142" class="comment even thread-even depth-1 highlander-comment">
		<article id="div-comment-1142" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/d2881b5d4c082996a62f23055b61956d.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://homakov.blogspot.com/" rel="external nofollow" class="url">Egor Homakov</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1142">
						<time datetime="2012-08-01T03:18:29+00:00">
							August 1, 2012 at 3:18 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Eran, this: <a href="http://homakov.blogspot.com/2012/08/saferweb-oauth2a-or-lets-just-fix-it.html" rel="nofollow">http://homakov.blogspot.com/2012/08/saferweb-oauth2a-or-lets-just-fix-it.html</a></p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1143" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.trdev.co.uk/2012/08/01/authentication-why-cant-we-solve-this-age-old-irritation/" rel="external nofollow" class="url">» Authentication: Why can’t we solve this age-old irritation? Tom Russell – A Ruby/Rails Developer</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1145" class="pingback even thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.simple-talk.com/blogs/2012/08/02/awful-oauth-2-when-standards-go-bad/" rel="external nofollow" class="url">Awful OAuth 2.0? When Standards go bad. – Simple-Talk</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1146" class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://notizblog.org/2012/08/02/oautsch/" rel="external nofollow" class="url">OAut(sc)h - notizBlog</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1150" class="comment even thread-even depth-1 parent highlander-comment">
		<article id="div-comment-1150" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/c7401bb8a100bf68344fe2ef59ecb8ba.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://www.comsi.com/" rel="external nofollow" class="url">Jeff Brandt</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1150">
						<time datetime="2012-08-03T13:22:27+00:00">
							August 3, 2012 at 1:22 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Great article but I hate to hear the news.  I attended a 
Healtcare meeting on a proposal to use OAuth2 and it sound like 
overkill.  </p>
<p>It reminds me of all my work in the 90’s on SET with IBM   (Secure 
Electronic Transactions), a very heavy secure protocol.  All of a sudden
 SSL came on the table and SET died.  SSL was “good enough”</p>
<p>Best of luck,<br>
Jeff</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	<ul class="children">

	<li id="comment-1152" class="comment odd alt depth-2 highlander-comment">
		<article id="div-comment-1152" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/edbcf7c3580e3ea2b8ed6fbfeec3071c.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">KatieP</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1152">
						<time datetime="2012-08-06T09:13:51+00:00">
							August 6, 2012 at 9:13 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Yes, that seems to be the case.  OAuth is designed to solve a 
simple problem in a complicated universe.  And there were many 
complicated tries on this WS-*, SAML (Federation)..  I put this down as 
the growing pain of this simple protocol.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li id="comment-1158" class="comment even thread-odd thread-alt depth-1 highlander-comment">
		<article id="div-comment-1158" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/8eac0ca0f37724ee607f9c0fca7960b4.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://yorkporc.wordpress.com/" rel="external nofollow" class="url">peter williams</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1158">
						<time datetime="2012-08-08T08:05:02+00:00">
							August 8, 2012 at 8:05 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Again, the overall tone of the comments is correct. The criticism
 is IDENTICAL to the criticism levied at X.509. X.509 in its v3 
incarnation was a framework – of a 1000 incompatibilities and a notation
 for easily manufacturing more.</p>
<p>Of course, eran also notes the solution to a framework-notational 
spec (which occured to X.509, another infamous framework-notational 
spec). Someone comes along and makes a super-dominant profile, probably 
webby, that is so compelling that everyone else needs to connect. For 
X.509, this was of course the netscape SSL server certificate. Only in 
windows do you see, enterprise-like the 24 other profiles that hardl 
anyone anyone ever sees (and actually rarely bitch about).</p>
<p>NOw the number of of folks who bitch about X.509 is larger by 2 
orders of magnitude than those who bitch at OAUTH v2 – mostly because 
its just been around for 20 years longer and the bitch-fests just get 
more political, more religious, and more hatred filled each year – as 
function of _reach_ (didnt you know X.509 today is still an 
ISO/Soviet/AlQueada plot to take over the US and impose 8bit micros on 
the world, rather popular in 1986 when X.509 first came about?) But also
 note, WHEN THE FRAMEWORK IS RIGHT, you are stilling talking about a 
silly bit format 20 (yes 20) years later.</p>
<p>Thats what standards are for. They are there to be still around 20 
and for X.509 30 years later, having evolved piecemeal for the last 15 
of them using the notational-framework – evolving subtly and dinosaur 
like as more and more economic dependence is placed on their shoulders.</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1159" class="comment odd alt thread-even depth-1 highlander-comment">
		<article id="div-comment-1159" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/c05fddac7f28cc31ba6cff141ca4787e.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">Raymond Forbes</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1159">
						<time datetime="2012-08-08T22:14:40+00:00">
							August 8, 2012 at 10:14 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>yes yes and more yes! thanks so much for posting this.  i watched
 the oauth 2.0 spec being developed after learning oauth 1.0 and i was 
vastly disappointed in the decisions that were being made.  it really 
felt like they were sacrificing security for ease of use, which is never
 a good thing for a security spec.</p>
<p>-r</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1164" class="pingback even thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://ekivemark.wordpress.com/2012/07/27/is-oauth-2-0-sinking/" rel="external nofollow" class="url">Is OAuth 2.0 sinking? | Health, Vitality and Technology</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1165" class="comment odd alt thread-even depth-1 highlander-comment">
		<article id="div-comment-1165" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/ad85fdef65270706a45bf0d1210f4316.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">Attaullah Baig</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1165">
						<time datetime="2012-08-26T08:21:26+00:00">
							August 26, 2012 at 8:21 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>There was no such thing as “simplicity”</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1166" class="comment even thread-odd thread-alt depth-1 highlander-comment">
		<article id="div-comment-1166" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/11c19c2179b6152af21057f0c6086b11.jpg" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn"><a href="http://trickortip.com/" rel="external nofollow" class="url">Andres Felipe Diaz</a></cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1166">
						<time datetime="2012-08-26T15:41:23+00:00">
							August 26, 2012 at 3:41 pm						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>Not much to add to all of this discussion. </p>
<p>However I want to thank you for your time dedicated throughout these years. Your geek efforts have made a huge difference. </p>
<p>The guide was also awesome and very well explanatory of how OAuth 1.0 works. </p>
<p>Now…as Mr. Wayne would say…”Eran Hammer, why do we fall sir? So we might learn to pick ourselves up”</p>
<p>I hope you keep producing valuable things for the community. </p>
<p>Best,<br>
Andrés</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->

	<li id="comment-1167" class="pingback odd alt thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://blog.programmableweb.com/2012/08/30/in-defense-of-oauth-2-0/" rel="external nofollow" class="url">In Defense of OAuth 2.0</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1170" class="pingback even thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://sharepointdragons.com/2012/09/03/sharepoint-2013-what-to-do-farm-solution-vs-sandbox-vs-app/" rel="external nofollow" class="url">SharePoint 2013: What to do? Farm solution vs Sandbox vs App « SharePoint Dragons</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1171" class="pingback odd alt thread-even depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://blogs.architectingconnectedsystems.com/blogs/cjg/archive/2012/09/05/OAuth-2.0-_2D00_-How-long-with-it-survive_3F00_.aspx" rel="external nofollow" class="url">CJG : OAuth 2.0 - How long with it survive?</a> <span class="sep"> ~ </span> 		</div>

	</li><!-- #comment-## -->

	<li id="comment-1172" class="pingback even thread-odd thread-alt depth-1 highlander-comment">
		<div class="comment-body">
			Pingback: <a href="http://www.andrewt.net/blog/co-ops/" rel="external nofollow" class="url">The internet needs fewer customers, fewer products and more hippies. | andrewt.net</a> <span class="sep"> ~ </span> 		</div>

	<ul class="children">

	<li id="comment-1173" class="comment odd alt depth-2 highlander-comment">
		<article id="div-comment-1173" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<div class="avatar-wrapper"><img alt="" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/bdbb123d0a92acd02a6e3039ec5f6b99.png" class="avatar avatar-60" height="60" width="60"></div>					<cite class="fn">Nils</cite> <span class="says">says:</span>				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-2/#comment-1173">
						<time datetime="2012-09-11T06:27:19+00:00">
							September 11, 2012 at 6:27 am						</time>
					</a>
									</div><!-- .comment-metadata -->

							</footer><!-- .comment-meta -->

			<div class="comment-content">
				<p>I’ve been a consultant for the best part of my life. I’ve been 
implementing access management solutions, SSO solutions, federated SSO 
and now I’m at the dawn of setting op a federated authorisation 
architecture for a big corporate organisation. I have not read all of 
these posts, but can somebody tell me what to do know. I need to provide
 the answer to the customer tomorrow…sic</p>
			</div><!-- .comment-content -->

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- .comment-body -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

				<nav id="comment-nav-below" class="navigation-comment" role="navigation">
			<h1 class="screen-reader-text">Comment navigation</h1>
			<div class="nav-previous"><a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/comment-page-1/#comments">← Older Comments</a></div>
			<div class="nav-next"></div>
		</nav><!-- #comment-nav-below -->
		
	
			<p class="no-comments">Comments are closed.</p>
	
			
</div><!-- #comments -->

		
		</div><!-- #content -->
	</div><!-- #primary -->

	<div id="secondary" class="widget-area" role="complementary">
							<div class="sidebar-1">
						<aside id="recent-posts-3" class="widget widget_recent_entries">		<h1 class="widget-title">Recent Posts</h1>		<ul>
					<li>
				<a href="http://hueniverse.com/2014/08/18/nipples-and-poop/">Nipples and Poop</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2014/08/15/open-source-aint-charity/">Open Source ain’t&nbsp;Charity</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2014/07/30/open-source-dickishness/">Open Source Dickishness</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2014/05/30/the-fallacy-of-tiny-modules/">The Fallacy of Tiny&nbsp;Modules</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2014/03/26/dont-be-a-bully/">Don’t Be a&nbsp;Bully</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2014/02/28/nodeday-slides-by-chris-carrasco/">#NodeDay Slides by Chris&nbsp;Carrasco</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2014/01/10/on-being-mentally-well/">On Being (Mentally)&nbsp;Well</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/12/05/speakers-creativity-budget/">Speakers Creativity Budget</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/12/02/empathy/">Empathy</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/10/28/realtimefood-realtimeconf/">#realtimefood @realtimeconf</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/09/22/lets-talk-about-food/">Let’s Talk About&nbsp;Food</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/07/10/diversity-2/">Diversity</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/07/02/realtime-conference-the-imagination-platform/">Realtime Conference, the Imagination&nbsp;Platform</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/02/21/hiring-engineers-a-process/">Hiring Engineers, a&nbsp;Process</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2013/01/17/hapi-hapi-joi-joi/">hapi hapi joi&nbsp;joi</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2012/12/20/hapi-a-prologue/">hapi, a Prologue</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2012/11/05/fuckoauth-realtimeconf/">#fuckoauth @realtimeconf</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2012/07/30/on-leaving-oauth/">On Leaving OAuth</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/">OAuth 2.0 and the Road to&nbsp;Hell</a>
						</li>
					<li>
				<a href="http://hueniverse.com/2012/01/04/you-me-and-node-walmartlabs/">You, Me, and Node&nbsp;@WalmartLabs</a>
						</li>
				</ul>
		</aside>			</div>
							<div class="sidebar-2">
				<aside id="categories-3" class="widget widget_categories"><h1 class="widget-title">Categories</h1>		<ul>
	<li class="cat-item cat-item-2290"><a href="http://hueniverse.com/category/architecture/">Architecture</a>
</li>
	<li class="cat-item cat-item-7375"><a href="http://hueniverse.com/category/cartoons/">Cartoons</a>
</li>
	<li class="cat-item cat-item-9369"><a href="http://hueniverse.com/category/discovery/">Discovery</a>
</li>
	<li class="cat-item cat-item-35890"><a href="http://hueniverse.com/category/featured/">Featured</a>
</li>
	<li class="cat-item cat-item-497323"><a href="http://hueniverse.com/category/guest-writer/">Guest Writer</a>
</li>
	<li class="cat-item cat-item-851999"><a href="http://hueniverse.com/category/microblogging/">Microblogging</a>
</li>
	<li class="cat-item cat-item-28224982"><a href="http://hueniverse.com/category/node-js/">Node.js</a>
</li>
	<li class="cat-item cat-item-2027657"><a href="http://hueniverse.com/category/oauth/">OAuth</a>
</li>
	<li class="cat-item cat-item-2581782"><a href="http://hueniverse.com/category/open-web/">Open Web</a>
</li>
	<li class="cat-item cat-item-36602"><a href="http://hueniverse.com/category/openid/">OpenID</a>
</li>
	<li class="cat-item cat-item-2244"><a href="http://hueniverse.com/category/opinions/">Opinions</a>
</li>
	<li class="cat-item cat-item-64"><a href="http://hueniverse.com/category/personal/">Personal</a>
</li>
	<li class="cat-item cat-item-95657"><a href="http://hueniverse.com/category/recap/">Recap</a>
</li>
	<li class="cat-item cat-item-456070"><a href="http://hueniverse.com/category/sled/">Sled</a>
</li>
	<li class="cat-item cat-item-4808"><a href="http://hueniverse.com/category/social-web/">Social Web</a>
</li>
	<li class="cat-item cat-item-4621"><a href="http://hueniverse.com/category/startup/">Startup</a>
</li>
	<li class="cat-item cat-item-1431504"><a href="http://hueniverse.com/category/sunday-reading/">Sunday Reading</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://hueniverse.com/category/uncategorized/">Uncategorized</a>
</li>
	<li class="cat-item cat-item-24024970"><a href="http://hueniverse.com/category/webfinger/">WebFinger</a>
</li>
	<li class="cat-item cat-item-131"><a href="http://hueniverse.com/category/work/">Work</a>
</li>
	<li class="cat-item cat-item-3182678"><a href="http://hueniverse.com/category/xrd/">XRD</a>
</li>
		</ul>
</aside>			</div>
							<div class="sidebar-3">
				<aside id="search-3" class="widget widget_search"><h1 class="widget-title">Search site</h1>	<form method="get" id="searchform" class="searchform" action="http://hueniverse.com/" role="search">
		<label for="s" class="screen-reader-text">Search</label>
		<input class="field" name="s" id="s" placeholder="Search …" type="search">
		<input class="submit" id="searchsubmit" value="Search" type="submit">
	</form>
</aside>			</div>
			</div><!-- #secondary -->

	</div><!-- #main -->
	<footer id="colophon" class="site-footer" role="contentinfo">
				<div class="site-info">
						<a href="http://wordpress.com/?ref=footer_blog">Blog at WordPress.com</a>.
			<span class="sep"> ~ </span>
			<a href="https://wordpress.com/themes/syntax/" title="Learn more about this theme">The Syntax Theme</a>.		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type="text/javascript" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/gprofiles.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type="text/javascript" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/wpgroho.js"></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {
			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-99636af1c451e7c17ae4395c3b1965b4">
	</div>
	<div class="grofile-hash-map-4bb012f45efa955f453e19967429afe1">
	</div>
	<div class="grofile-hash-map-88d6511b6491b53daf32a211d8617975">
	</div>
	<div class="grofile-hash-map-0e5be8778571e5629827b136843bfcab">
	</div>
	<div class="grofile-hash-map-28d0cb94cd9afcc9763dd64fea80a187">
	</div>
	<div class="grofile-hash-map-9d9b7698c26959f57c0e3814005b8b52">
	</div>
	<div class="grofile-hash-map-d613bb16a0b359279c62e6c8040dfa99">
	</div>
	<div class="grofile-hash-map-c92db8602598ced00ac4c48166c1e4c0">
	</div>
	<div class="grofile-hash-map-b6a5cf3213cec9e9d18f32edd479628c">
	</div>
	<div class="grofile-hash-map-d2881b5d4c082996a62f23055b61956d">
	</div>
	<div class="grofile-hash-map-c7401bb8a100bf68344fe2ef59ecb8ba">
	</div>
	<div class="grofile-hash-map-edbcf7c3580e3ea2b8ed6fbfeec3071c">
	</div>
	<div class="grofile-hash-map-8eac0ca0f37724ee607f9c0fca7960b4">
	</div>
	<div class="grofile-hash-map-c05fddac7f28cc31ba6cff141ca4787e">
	</div>
	<div class="grofile-hash-map-ad85fdef65270706a45bf0d1210f4316">
	</div>
	<div class="grofile-hash-map-11c19c2179b6152af21057f0c6086b11">
	</div>
	<div class="grofile-hash-map-bdbb123d0a92acd02a6e3039ec5f6b99">
	</div>
	</div>

	<div id="bit" class="loggedout-follow-normal">
		<a class="bsub" href="javascript:void(0)"><span id="bsub-text">Follow</span></a>
		<div id="bitsubscribe">

					<h3><label for="loggedout-follow-field">Follow “hueniverse”</label></h3>

			<form action="https://subscribe.wordpress.com" method="post" accept-charset="utf-8" id="loggedout-follow">
			<p>Get every new post delivered to your Inbox.</p>

			<p id="loggedout-follow-error" style="display: none;"></p>

						<p class="bit-follow-count">Join 3,620 other followers</p>
			<p><input name="email" value="Enter your email address" onfocus='this.value=(this.value=="Enter your email address") ? "" : this.value;' onblur='this.value=(this.value=="") ? "Enter email address" : this.value;' id="loggedout-follow-field" type="email"></p>

			<input name="action" value="subscribe" type="hidden">
			<input name="blog_id" value="66546211" type="hidden">
			<input name="source" value="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/" type="hidden">
			<input name="sub-type" value="loggedout-follow" type="hidden">

			<input id="_wpnonce" name="_wpnonce" value="5143037aa4" type="hidden"><input name="_wp_http_referer" value="/2012/07/26/oauth-2-0-and-the-road-to-hell/" type="hidden">
			<p id="bsub-subscribe-button"><input value="Sign me up" type="submit"></p>
			</form>
					<div id="bsub-credit"><a href="https://wordpress.com/?ref=lof">Powered by WordPress.com</a></div>
		</div><!-- #bitsubscribe -->
	</div><!-- #bit -->

	<script type="text/javascript">
		WPCOM_sharing_counts = {"http:\/\/hueniverse.com\/2012\/07\/26\/oauth-2-0-and-the-road-to-hell\/":1538}	</script>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
				<iframe src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/master.htm" id="likes-master" name="likes-master" style="display:none;" scrolling="no"></iframe>
		<div id="likes-other-gravatars"><div class="likes-text"><span>%d</span> bloggers like this:</div><ul class="wpl-avatars sd-like-gravatars"></ul></div>
		<script type="text/javascript">
		//<![CDATA[
			var jetpackLikesWidgetQueue = [];
			var jetpackLikesWidgetBatch = [];
			var jetpackLikesMasterReady = false;

			function JetpackLikespostMessage( message, target ) {
				if ( "string" === typeof message ){
					try{
						message = JSON.parse( message );
					}
					catch(e) {
						return;
					}
				}

				pm( {
					target: target,
					type: 'likesMessage',
					data: message,
					origin: '*'
				} );
			}

			function JetpackLikesBatchHandler() {
				var requests = [];
				jQuery( 'div.jetpack-likes-widget-unloaded' ).each( function( i ) {
					if ( jetpackLikesWidgetBatch.indexOf( this.id ) > -1 )
						return;
					jetpackLikesWidgetBatch.push( this.id );
					var regex = /like-(post|comment)-wrapper-(\d+)-(\d+)-(\w+)/;
					var match = regex.exec( this.id );
					if ( ! match || match.length != 5 )
						return;

					var info = {
						blog_id: match[2],
						width:   this.width
					};

					if ( 'post' == match[1] ) {
						info.post_id = match[3];
					} else if ( 'comment' == match[1] ) {
						info.comment_id = match[3];
					}

					info.obj_id = match[4];

					requests.push( info );
				});

				if ( requests.length > 0 ) {
					JetpackLikespostMessage( { event: 'initialBatch', requests: requests }, window.frames['likes-master'] );
				}
			}

			function JetpackLikesMessageListener( event ) {
				if ( "undefined" == typeof event.event )
					return;

				if ( 'masterReady' == event.event ) {
					jQuery( document ).ready( function() {
						jetpackLikesMasterReady = true;

						var stylesData = {
								event: 'injectStyles'
						};

						if ( jQuery( 'iframe.admin-bar-likes-widget' ).length > 0 ) {
							JetpackLikespostMessage( { event: 'adminBarEnabled' }, window.frames[ 'likes-master' ] );

							stylesData.adminBarStyles = {
								background: jQuery( '#wpadminbar .quicklinks li#wp-admin-bar-wpl-like > a' ).css( 'background' ),
								isRtl: ( 'rtl' == jQuery( '#wpadminbar' ).css( 'direction' ) )
							};
						}

						if ( !window.addEventListener )
							jQuery( '#wp-admin-bar-admin-bar-likes-widget' ).hide();

						stylesData.textStyles = {
							color: jQuery( '.sd-text-color').css( 'color' ),
							fontFamily: jQuery( '.sd-text-color' ).css( 'font-family' ),
							fontSize: jQuery( '.sd-text-color' ).css( 'font-size' ),
							direction: jQuery( '.sd-text-color' ).css( 'direction' ),
							fontWeight: jQuery( '.sd-text-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-text-color' ).css( 'font-style' ),
							textDecoration: jQuery( '.sd-text-color' ).css('text-decoration')
						};

						stylesData.linkStyles = {
							color: jQuery( '.sd-link-color' ).css('color'),
							fontFamily: jQuery( '.sd-link-color' ).css('font-family'),
							fontSize: jQuery( '.sd-link-color' ).css('font-size'),
							textDecoration: jQuery( '.sd-link-color' ).css('text-decoration'),
							fontWeight: jQuery( '.sd-link-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-link-color' ).css( 'font-style' )
						};

						JetpackLikespostMessage( stylesData, window.frames[ 'likes-master' ] );

						JetpackLikesBatchHandler();

						jQuery( document ).on( 'inview', 'div.jetpack-likes-widget-unloaded', function() {
							jetpackLikesWidgetQueue.push( this.id );
						});
					});
				}

				if ( 'showLikeWidget' == event.event ) {
					jQuery( '#' + event.id + ' .post-likes-widget-placeholder'  ).fadeOut( 'fast', function() {
						jQuery( '#' + event.id + ' .post-likes-widget' ).fadeIn( 'fast', function() {
							JetpackLikespostMessage( { event: 'likeWidgetDisplayed', blog_id: event.blog_id, post_id: event.post_id, obj_id: event.obj_id }, window.frames['likes-master'] );
						});
					});
				}

				if ( 'clickReblogFlair' == event.event ) {
					wpcom_reblog.toggle_reblog_box_flair( event.obj_id );
				}

				if ( 'showOtherGravatars' == event.event ) {
					var $container = jQuery( '#likes-other-gravatars' );
					var $list = $container.find( 'ul' );

					$container.hide();
					$list.html( '' );

					$container.find( '.likes-text span' ).text( event.total );

					jQuery.each( event.likers, function( i, liker ) {
						$list.append( '<li class="' + liker.css_class + '"><a href="' + liker.profile_URL + '" class="wpl-liker" rel="nofollow" target="_parent"><img src="' + liker.avatar_URL + '" alt="' + liker.name + '" width="30" height="30" style="padding-right: 3px;" /></a></li>');
					} );

					var offset = jQuery( "[name='" + event.parent + "']" ).offset();

					$container.css( 'left', offset.left + event.position.left - 10 + 'px' );
					$container.css( 'top', offset.top + event.position.top - 33 + 'px' );

					var rowLength = Math.floor( event.width / 37 );
					var height = ( Math.ceil( event.likers.length / rowLength ) * 37 ) + 13;
					if ( height > 204 ) {
						height = 204;
					}

					$container.css( 'height', height + 'px' );
					$container.css( 'width', rowLength * 37 - 7 + 'px' );

					$list.css( 'width', rowLength * 37 + 'px' );

					$container.fadeIn( 'slow' );

					var scrollbarWidth = $list[0].offsetWidth - $list[0].clientWidth;
					if ( scrollbarWidth > 0 ) {
						$container.width( $container.width() + scrollbarWidth );
						$list.width( $list.width() + scrollbarWidth );
					}
				}
			}

			pm.bind( 'likesMessage', function(e) { JetpackLikesMessageListener(e); } );

			jQuery( document ).click( function( e ) {
				var $container = jQuery( '#likes-other-gravatars' );

				if ( $container.has( e.target ).length === 0 ) {
					$container.fadeOut( 'slow' );
				}
			});

			function JetpackLikesWidgetQueueHandler() {
				var wrapperID;
				if ( ! jetpackLikesMasterReady ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				if ( jetpackLikesWidgetQueue.length > 0 ) {
					// We may have a widget that needs creating now
					var found = false;
					while( jetpackLikesWidgetQueue.length > 0 ) {
						// Grab the first member of the queue that isn't already loading.
						wrapperID = jetpackLikesWidgetQueue.splice( 0, 1 )[0];
						if ( jQuery( '#' + wrapperID ).hasClass( 'jetpack-likes-widget-unloaded' ) ) {
							found = true;
							break;
						}
					}
					if ( ! found ) {
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				} else if ( jQuery( 'div.jetpack-likes-widget-unloaded' ).length > 0 ) {
					// Grab any unloaded widgets for a batch request
					JetpackLikesBatchHandler();

					// Get the next unloaded widget
					wrapperID = jQuery( 'div.jetpack-likes-widget-unloaded' ).first()[0].id;
					if ( ! wrapperID ) {
						// Everything is currently loaded
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				}

				if ( 'undefined' === typeof wrapperID ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				var $wrapper = jQuery( '#' + wrapperID );
				$wrapper.find( 'iframe' ).remove();

				if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "<iframe class='post-likes-widget jetpack-likes-widget' name='" + $wrapper.data( 'name' ) + "' height='22px' width='68px' frameBorder='0' scrolling='no' src='" + $wrapper.data( 'src' ) + "'></iframe>" );
				} else {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "<iframe class='post-likes-widget jetpack-likes-widget' name='" + $wrapper.data( 'name' ) + "' height='55px' width='100%' frameBorder='0' src='" + $wrapper.data( 'src' ) + "'></iframe>" );
				}

				$wrapper.removeClass( 'jetpack-likes-widget-unloaded' ).addClass( 'jetpack-likes-widget-loading' );

				$wrapper.find( 'iframe' ).load( function( e ) {
					var $iframe = jQuery( e.target );
					$wrapper.removeClass( 'jetpack-likes-widget-loading' ).addClass( 'jetpack-likes-widget-loaded' );

					JetpackLikespostMessage( { event: 'loadLikeWidget', name: $iframe.attr( 'name' ), width: $iframe.width() }, window.frames[ 'likes-master' ] );

					if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
						$wrapper.find( 'iframe' ).Jetpack( 'resizeable' );
					}
				});
				setTimeout( JetpackLikesWidgetQueueHandler, 250 );
			}
			JetpackLikesWidgetQueueHandler();
		//]]>
		</script>
<script type="text/javascript">
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type="text/javascript" src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/a.js"></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script><script src="OAuth%202.0%20and%20the%20Road%20to%20Hell%20_%20hueniverse_files/w.htm" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'66546211','v':'wpcom','tz':'-7','user_id':'0','post':'1538','subd':'hueniversedotcom'});
ex_go({'crypt':'UE40eW5QN0p8M2Y/RE1TaVhzUzFMbjdWNHpwZGhTayxPSUFCMGRVYVNrSFguN3FwSmQ5RGtNX3VQcj1yVzhiflM1THQtLGFdQ2toOXYlR3xqdHAxYz1WRWdyUVNVVy5MS0w5NCtJLS5iR1FXcE5ZVmMlUT1sbmdLOGJ4ZGx2SHcxcUY4UUY0NWU9YWdzUGRlSXJhX3hnNGtIaHhdSHUtRldqbXlyUGo/fFpxW3RNQk5KclFxYiUtVlU9Z0swTVRnLXlFUFdzWWxXU2pacFFpXThIN1Q5Yk1pLGRBZ0RJWT9JVGQyemdfX2U3LGZYU0RvfGVjfDZ+cX43MTcrYWFkTy4uY3UmU0NTV1YsTHVQPUxYbHRuRi16QmlbWW1RdkN0RT00VCYrUFN8eDZIRjFZMTlCLjhST3NE'});
addLoadEvent(function(){linktracker_init('66546211',1538);});
	</script>
<noscript><img src="http://pixel.wp.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /></noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>

</body></html>